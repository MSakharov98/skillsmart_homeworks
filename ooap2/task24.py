# ✅ Пример 1: Абстрагирование
# Исходная ситуация:
# В проекте существует класс PDFReport, который умеет генерировать PDF-отчёты, настраивать шрифт, вставлять таблицы, строить диаграммы.
#
# Проблема:
# Сначала класс создавался как универсальный "отчёт", но позже стало ясно, что он завязался только на формат PDF, а нужно генерировать отчёты также в HTML и DOCX.
#
# Решение — абстрагирование:
# Вводится абстрактный родительский класс Report, определяющий общий интерфейс add_table(), add_chart(), export().
# PDFReport становится подклассом, реализующим экспорт именно в PDF.
#
# Появляется иерархия:
#
# Report (абстрактный класс)
#
# PDFReport
#
# HTMLReport
#
# DocxReport
#
# Почему это абстрагирование:
# Ранее "конкретный" класс оказался частным случаем, и ему добавили предка, обобщающего поведение.
#
# ✅ Пример 2: Факторизация
# Исходная ситуация:
# В коде уже есть два независимых класса: MySQLConnector и PostgreSQLConnector.
# Они оба умеют подключаться к базе, выполнять запросы, обрабатывать ошибки, но реализованы отдельно и без общего кода.
#
# Проблема:
# Код дублируется, интерфейсы разные, хотя по сути — это реализация одного и того же понятия: "соединение с СУБД".
#
# Решение — факторизация:
# Создаётся общий родительский класс DatabaseConnector, в который выносится общее поведение (connect(), execute(), disconnect()), а специфические детали оставляются в подклассах.
#
# Появляется иерархия:
#
# DatabaseConnector (новый абстрактный класс)
#
# MySQLConnector
#
# PostgreSQLConnector
#
# Почему это факторизация:
# Два ранее несвязанных класса были осмыслены как частные случаи одного общего понятия, которому и выделили родителя.