В Python класс может использоваться как модуль, так как сам по себе создаёт пространство имен, может содержать любые определения и быть импортирован или инкапсулирован для повторного использования.

Я выбираю язык Python, поскольку он очень гибко поддерживает концепцию "класс как модуль".

1. Класс как пространство имен

В Python любой класс создаёт собственное пространство имен. Всё, что объявлено внутри класса (переменные, функции, вложенные классы), становится доступным через квалифицированный доступ:

class MathModule:
    PI = 3.14159

    @staticmethod
    def area_of_circle(radius):
        return MathModule.PI * radius * radius
Здесь MathModule действует как модуль: хранит константы и функции, связанные логически.

2. Классы можно использовать как закрытые модули внутри других классов или модулей

class Physics:
    class Constants:
        G = 9.81
        C = 299792458
Physics.Constants выполняет ту же роль, что и вложенный модуль.

3. Импорт классов как модулей

Класс можно положить в отдельный файл, например math_module.py:

# файл math_module.py
class MathModule:
    PI = 3.14159

    @staticmethod
    def area_of_circle(radius):
        return MathModule.PI * radius * radius

А затем импортировать в другую часть программы:

from math_module import MathModule

print(MathModule.area_of_circle(5))
4. Классы можно комбинировать в сборки и пакеты

Python позволяет организовать большие проекты, где папка — это пакет, а каждый файл — отдельный модуль:

/my_project
    /geometry
        __init__.py
        shapes.py
        calculations.py
Внутри shapes.py могут быть классы Circle, Square и др., выполняющие роль отдельных модулей внутри пакета geometry.

5. Отличие от обычных модулей

Хотя Python поддерживает модули и пакеты как файловые единицы (.py файлы и папки), классы внутри них могут выполнять роль самостоятельных модулей логической организации кода — с инкапсуляцией, контролем доступа (через _private соглашения) и повторным использованием.

В Python класс — это естественный способ создания мини-модуля внутри программы: он изолирует пространство имен, объединяет данные и поведение, поддерживает вложенность, может быть импортирован и масштабируем как часть больших сборок. Это и есть полная поддержка концепции "класс как модуль".
