# 1. Когда связи между модулями должны быть публичными?
#
# Да, иногда это оправдано. Связи между модулями (импорты, зависимости, вызовы) должны быть публичными, если:
#
# Модуль является частью открытого API** — он должен явно демонстрировать, какие внешние зависимости использует.
# Связь отражает архитектурный контракт** — например, модуль `UI` использует `Service`, а не наоборот. Это важно для документации и сопровождения.
# Нужна прозрачность и тестируемость** — особенно в крупных системах, чтобы понимать, что от чего зависит.
#
# Пример:
#
# # ui_module.py
# from business_logic import OrderService  # Явная и публичная зависимость
#
#
# Когда не стоит делать связь публичной:
#
# Если зависимость является деталью реализации (инкапсулировать!)
# Если это нарушает архитектурную иерархию (например, низкоуровневый модуль зависит от высокоуровневого)
#
# ---
#
# 2. Метрики для количественной оценки модульности**
#
# 5 метрик, которые помогут оценить модульность системы:
#
# | Метрика                                            | Описание                                                                                 |
# | -------------------------------------------------- | ---------------------------------------------------------------------------------------- |
# | Fan-in                                             | Сколько модулей используют данный модуль (высокий — хорошо)                              |
# | Fan-out                                            | Сколько модулей использует данный модуль (низкий — хорошо)                               |
# | Cohesion (сцепленность)                            | Насколько функции модуля связаны общей задачей (высокая сцепленность — хорошо)           |
# | Coupling (связанность)                             | Насколько модуль зависит от других (низкая связанность — хорошо)                         |
# | Instability (I = Fan-out / (Fan-in + Fan-out))     | Насколько легко сломать модуль при изменениях (I → 0 — стабилен, I → 1 — легко ломается) |
#
# Дополнительно можно использовать:
#
# Количество публичных интерфейсов** на модуль
# Глубина иерархии импортов**
# Число циклических зависимостей (желательно 0)
#
# ---
#
# 3. Как оценить свою систему (если было 3–5+ классов)
#
# Если вы разрабатывали хотя бы среднюю программу, можно прикинуть:
#
# Fan-in/Fan-out** — визуально по карте зависимостей: много входящих — хорошо, много исходящих — плохо.
# Cohesion** — если все функции модуля решают одну задачу (например, `UserAuth`, `ReportGenerator`) — сцепленность высокая.
# Coupling** — если приходится менять сразу несколько файлов при изменении одного — модули слишком связаны.
# Instability** — если при изменении одного класса "сыпется" вся программа — высокий риск.
#
# Пример оценки:
#
# Модуль Report:
# - Fan-in: 3 (используется UI, cron, логгером) — ОК
# - Fan-out: 1 (только логгер) — хорошо
# - Cohesion: высокая — делает только генерацию отчётов
# - Coupling: слабая — использует только абстракции
# - Instability: 0.25 — довольно стабилен